//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Controllers.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controllers : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controllers()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controllers"",
    ""maps"": [
        {
            ""name"": ""penguin"",
            ""id"": ""d9d7317e-6e92-41c1-b6fb-0ebb96326846"",
            ""actions"": [
                {
                    ""name"": ""addScore"",
                    ""type"": ""Button"",
                    ""id"": ""b8604769-e25a-4462-9297-b67ab9caeb5e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GOD"",
                    ""type"": ""Button"",
                    ""id"": ""9adc502d-ae23-4ea0-b8bc-ea1f696c33bd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""lerpTest"",
                    ""type"": ""Button"",
                    ""id"": ""9af8bbfe-76b0-49a2-8200-3d3396a8a979"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""removeScore"",
                    ""type"": ""Button"",
                    ""id"": ""2f7a4834-de8d-43f9-b0a3-8bd0f2b9f572"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""967c9395-19aa-40ce-8133-32dc2bc6e085"",
                    ""path"": ""<Keyboard>/numpadPlus"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""addScore"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""69135490-04ae-4b28-b945-99ef7106fb20"",
                    ""path"": ""<Keyboard>/numpadMultiply"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GOD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6dc28301-5894-4ebf-a1b2-4f3387aec2ce"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""lerpTest"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9e9b0b23-1115-4d51-9e07-74b2f5efd2f5"",
                    ""path"": ""<Keyboard>/numpadMinus"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""removeScore"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // penguin
        m_penguin = asset.FindActionMap("penguin", throwIfNotFound: true);
        m_penguin_addScore = m_penguin.FindAction("addScore", throwIfNotFound: true);
        m_penguin_GOD = m_penguin.FindAction("GOD", throwIfNotFound: true);
        m_penguin_lerpTest = m_penguin.FindAction("lerpTest", throwIfNotFound: true);
        m_penguin_removeScore = m_penguin.FindAction("removeScore", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // penguin
    private readonly InputActionMap m_penguin;
    private IPenguinActions m_PenguinActionsCallbackInterface;
    private readonly InputAction m_penguin_addScore;
    private readonly InputAction m_penguin_GOD;
    private readonly InputAction m_penguin_lerpTest;
    private readonly InputAction m_penguin_removeScore;
    public struct PenguinActions
    {
        private @Controllers m_Wrapper;
        public PenguinActions(@Controllers wrapper) { m_Wrapper = wrapper; }
        public InputAction @addScore => m_Wrapper.m_penguin_addScore;
        public InputAction @GOD => m_Wrapper.m_penguin_GOD;
        public InputAction @lerpTest => m_Wrapper.m_penguin_lerpTest;
        public InputAction @removeScore => m_Wrapper.m_penguin_removeScore;
        public InputActionMap Get() { return m_Wrapper.m_penguin; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PenguinActions set) { return set.Get(); }
        public void SetCallbacks(IPenguinActions instance)
        {
            if (m_Wrapper.m_PenguinActionsCallbackInterface != null)
            {
                @addScore.started -= m_Wrapper.m_PenguinActionsCallbackInterface.OnAddScore;
                @addScore.performed -= m_Wrapper.m_PenguinActionsCallbackInterface.OnAddScore;
                @addScore.canceled -= m_Wrapper.m_PenguinActionsCallbackInterface.OnAddScore;
                @GOD.started -= m_Wrapper.m_PenguinActionsCallbackInterface.OnGOD;
                @GOD.performed -= m_Wrapper.m_PenguinActionsCallbackInterface.OnGOD;
                @GOD.canceled -= m_Wrapper.m_PenguinActionsCallbackInterface.OnGOD;
                @lerpTest.started -= m_Wrapper.m_PenguinActionsCallbackInterface.OnLerpTest;
                @lerpTest.performed -= m_Wrapper.m_PenguinActionsCallbackInterface.OnLerpTest;
                @lerpTest.canceled -= m_Wrapper.m_PenguinActionsCallbackInterface.OnLerpTest;
                @removeScore.started -= m_Wrapper.m_PenguinActionsCallbackInterface.OnRemoveScore;
                @removeScore.performed -= m_Wrapper.m_PenguinActionsCallbackInterface.OnRemoveScore;
                @removeScore.canceled -= m_Wrapper.m_PenguinActionsCallbackInterface.OnRemoveScore;
            }
            m_Wrapper.m_PenguinActionsCallbackInterface = instance;
            if (instance != null)
            {
                @addScore.started += instance.OnAddScore;
                @addScore.performed += instance.OnAddScore;
                @addScore.canceled += instance.OnAddScore;
                @GOD.started += instance.OnGOD;
                @GOD.performed += instance.OnGOD;
                @GOD.canceled += instance.OnGOD;
                @lerpTest.started += instance.OnLerpTest;
                @lerpTest.performed += instance.OnLerpTest;
                @lerpTest.canceled += instance.OnLerpTest;
                @removeScore.started += instance.OnRemoveScore;
                @removeScore.performed += instance.OnRemoveScore;
                @removeScore.canceled += instance.OnRemoveScore;
            }
        }
    }
    public PenguinActions @penguin => new PenguinActions(this);
    public interface IPenguinActions
    {
        void OnAddScore(InputAction.CallbackContext context);
        void OnGOD(InputAction.CallbackContext context);
        void OnLerpTest(InputAction.CallbackContext context);
        void OnRemoveScore(InputAction.CallbackContext context);
    }
}
